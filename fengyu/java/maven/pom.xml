<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
	<!--设置的maven本地仓库 -->
	<localRepository>D:/maven_repos</localRepository>
	<pluginGroups />
	<proxies>
		<proxy>
			<id>optional</id>
			<active>true</active>
			<protocol>http</protocol>
			<!-- <username>proxyuser</username> -->
			<!-- <password>proxypass</password> -->
			<host>10.50.135.250</host>
			<port>8080</port>
			<nonProxyHosts>local.net|some.host.com</nonProxyHosts>
		</proxy>
	</proxies>
	<!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。 -->
	<servers>
		<server>
			<!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->
			<id>nexus</id>
			<!--nexus中配置的用户名密码 -->
			<username>admin</username>
			<password>admin123</password>
		</server>
		<!--将项目发布到私服中需要用到 -->
		<server>
			<!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->
			<id>skyheng-releases</id>
			<!--nexus中配置的用户名密码 -->
			<username>admin</username>
			<password>admin123</password>
		</server>
		<!--将项目发布到私服中需要用到 -->
		<server>
			<!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->
			<id>skyheng-snapshots</id>
			<!--nexus中配置的用户名密码 -->
			<username>admin</username>
			<password>admin123</password>
		</server>
	</servers>
	<!--为仓库列表配置的下载镜像列表。 -->
	<mirrors>
		<mirror>
			<!--该镜像的唯一标识符。id用来区分不同的mirror元素。 -->
			<id>nexus</id>
			<!--此处配置所有的构建均从私有仓库中下载 *代表所有，也可以写central -->
			<mirrorOf>*</mirrorOf>
			<name>central repository</name>
			<!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->
			<url>https://maven.aliyun.com/nexus/content/groups/public/</url>
		</mirror>
	</mirrors>
	<!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。 -->
	<!--它包含了id，activation, repositories, pluginRepositories和 properties元素。 -->
	<!--这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。 -->
	<!--如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。 -->
	<profiles>
		<profile>
			<id>nexus</id>
			<!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 -->
			<repositories>
				<!--发布版本仓库 -->
				<repository>
					<id>nexus</id>
					<!--name随便 -->
					<name>Nexus Release Snapshot Repository</name>
					<!--地址是nexus中repository（Releases/Snapshots）中对应的地址 -->
					<url>https://maven.aliyun.com/nexus/content/groups/public/</url>
					<!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</repository>
			</repositories>
			<!--发现插件的远程仓库列表。仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储的大部分构件类型。另外一种构件类型是插件。 -->
			<!--各节点的含义和repository是一样的 -->
			<pluginRepositories>
				<pluginRepository>
					<id>nexus</id>
					<name>Nexus Release Snapshot Repository</name>
					<url>https://maven.aliyun.com/nexus/content/groups/public/</url>
					<releases>
						<enabled>true</enabled>
					</releases>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
				</pluginRepository>
			</pluginRepositories>
		</profile>
		<!--设置maven编译器级别 -->
		<profile>
			<id>jdk18</id>
			<activation>
				<!--profile默认是否激活的标识 -->
				<activeByDefault>true</activeByDefault>
				<!--activation有一个内建的java版本检测，如果检测到jdk版本与期待的一样，profile被激活。 -->
				<jdk>1.8</jdk>
			</activation>
			<properties>
				<maven.compiler.source>1.8</maven.compiler.source>
				<maven.compiler.target>1.8</maven.compiler.target>
				<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
			</properties>
		</profile>
	</profiles>
	<!--激活配置 -->
	<activeProfiles>
		<!--profile下的id -->
		<activeProfile>nexus</activeProfile>
	</activeProfiles>
</settings>